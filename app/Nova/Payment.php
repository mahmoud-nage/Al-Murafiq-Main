<?php

namespace App\Nova;

use Illuminate\Support\Str;
use Laravel\Nova\Fields\ID;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\Trix;
use Laravel\Nova\Fields\Image;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\MorphOne;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\MorphMany;
use App\Nova\Actions\PaidPaymentRequest;
use Laravel\Nova\Http\Requests\NovaRequest;

class Payment extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\General\Payment::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';
    public static $group = 'Companies';
    public static $priority = 5;

    public static function group()
    {
        return __('companies'); // TODO: Change the autogenerated stub
    }

    public static function label()
    {
        return __('payments'); // TODO: Change the autogenerated stub
    }

    public function title()
    {
        return 'Payment ' . $this->id; // TODO: Change the autogenerated stub
    }


    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            BelongsTo::make(__('user'), 'user', User::class)->rules('required')->default(auth()->user()->id),
            BelongsTo::make(__('company'), 'company', Company::class)->rules('required'),
            BelongsTo::make(__('paymentMethod'), 'paymentMethod', PaymentMethod::class)->default(\App\General\PaymentMethod::where('type', 'Cash')->first()->id)->rules('required'),
            Number::make(__('amount'), 'amount')->rules('required')->step(0.5)->min(1)->default(1),
            Trix::make(__('Payment Details'), 'payment_details'),
            Boolean::make(__('Payment Status'), 'payment_status')->trueValue(1)->falseValue(0)->sortable()->default(0),

            Image::make(__('Payment Reciet'), 'file')
                ->disk('Root')
                ->store(function (Request $request, $model) {
                    $filename = Str::random(50) . '.' . $request->file->getClientOriginalExtension();
                    $request->file->move(public_path('/uploads/payments/'), $filename);
                    return [
                        'file' => '/uploads/payments/' . $filename,
                    ];
                })
                ->prunable()
                ->creationRules('image', 'mimes:png,jpeg,jpg,gif')
                ->updateRules('image', 'mimes:png,jpeg,jpg,gif'),

        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function actions(Request $request)
    {
        // $payment = \App\General\Payment::find(request()->resourceId);
        // if($payment && !$payment->payment_status){
        //     return [
        //         new PaidPaymentRequest,
        //     ];
        // }
        return [
            (new PaidPaymentRequest),
        ];
    }
}
