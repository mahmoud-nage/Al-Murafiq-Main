<?php

namespace App\Nova;

use Laravel\Nova\Fields\ID;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\Slug;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Trix;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Select;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\HasMany;
use App\Nova\Actions\TicketReplay;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\BelongsToMany;
use Laravel\Nova\Http\Requests\NovaRequest;

class Ticket extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\General\Ticket::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'subject';
    public static $group = 'Tickets';

    public static function group()
    {
        return __('tickets'); // TODO: Change the autogenerated stub
    }
    public static function label()
    {
        return __('tickets'); // TODO: Change the autogenerated stub
    }
    public function title()
    {
        return $this->subject; // TODO: Change the autogenerated stub
    }
    public function subTitle()
    {
        return __('Details').': '.$this->details; // TODO: Change the autogenerated stub
    }

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
    ];


    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            BelongsTo::make(__('user'), 'user', 'App\Nova\User')->rules('required'),
            Number::make(__('code'),'code')->default(rand(111,999)),

            Text::make(__('subject'), 'subject')
                ->rules('required', 'max:190')
                ->sortable(),
            Trix::make(__('Details'), 'details')->rules('required'),

            Select::make(__('type'), 'type')->options([
                'General' => __('General'),
                'Marketer' => __('Affilate'),
                'Company' => __('Company'),
                'Customer' => __('Customer'),
            ]),

            Boolean::make(__('viewed'),'viewed')->trueValue(1)->falseValue(0)->sortable()->default(0)->exceptOnForms(),

            // HasMany::make(__('ticketReply'),'ticketReply', TicketReply::class)->canSee(function ($request) {
            //         return $request->user()->can('view TicketReply', $this);
            //     }),

            HasMany::make(__('ticketReply'),'ticketReply', TicketReply::class),
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [
            new TicketReplay
        ];
    }
}
