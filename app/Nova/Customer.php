<?php

namespace App\Nova;

use Laravel\Nova\Panel;
use Laravel\Nova\Resource;
use Laravel\Nova\Fields\ID;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Image;
use Yassi\NestedForm\NestedForm;
use Laravel\Nova\Fields\MorphOne;
use Laravel\Nova\Http\Requests\NovaRequest;

class Customer extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Customer\Customer::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';
    public static $group = 'Users';
    public static $priority = 3;
    
    public static function group()
    {
        return __('users'); // TODO: Change the autogenerated stub
    }
    public static function label()
    {
        return __('customers'); // TODO: Change the autogenerated stub
    }

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            new Panel(__('user_profile'), $this->personalInfo()),
            // NestedForm::make('user'),
            MorphOne::make(__('user'),'user',User::class),
        ];
    }

    public function personalInfo()
    {
        return [
            Image::make(__('avatar'), function () {
                return $this->getAvatar();
            })->disk('Root')->sortable(),

            Text::make(__('name'), function () {
                return $this->getName();
            })->sortable(),
            Text::make(__('phone'), function () {
                return $this->getPhone();
            })->sortable(),
            Text::make(__('email'), function () {
                return $this->getMail();
            })->sortable(),
        ];
    }
    
    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [];
    }
}
