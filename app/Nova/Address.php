<?php

namespace App\Nova;

use Illuminate\Http\Request;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Trix;
use Laravel\Nova\Http\Requests\NovaRequest;

class Address extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\General\Address::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';
    public static $displayInNavigation = false;
    public static function label()
    {
        return __('address'); // TODO: Change the autogenerated stub
    }


    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            BelongsTo::make(__('user'), 'user', 'App\Nova\User')->rules('required'),
            BelongsTo::make(__('area'), 'area', 'App\Nova\Area')->rules('required'),
            Text::make(__('address_details'), 'address_details')
                ->rules('required', 'max:190')
                ->sortable(),
            Text::make(__('phone'),'Phone')
                ->rules('required', 'max:190')
                ->sortable(),
            Trix::make(__('special_mark'), 'special_mark')->rules('required'),
            Number::make(__('lat'),'lat')->rules('max:190'),
            Number::make(__('lon'),'lon')->rules('max:190'),
            Boolean::make(__('active'),'active')->trueValue(1)->falseValue(0)->sortable()->default(1),
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [
            (new Active)->confirmText(__('Are you sure you want to activate this user?'))
            ->confirmButtonText(__('Activate'))
            ->cancelButtonText(__("Don't activate")),
        (new Deactive)->confirmText(__('Are you sure you want to Deactivate this user?'))
            ->confirmButtonText(__('DeActivate'))
            ->cancelButtonText(__("Don't deactivate")),
        ];
    }
}
