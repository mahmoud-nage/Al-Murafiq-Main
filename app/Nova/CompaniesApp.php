<?php

namespace App\Nova;


use App\Nova\Resource;
use Laravel\Nova\Panel;
use Illuminate\Support\Str;
use Laravel\Nova\Fields\ID;
use App\Nova\Actions\Active;
use App\Nova\Filters\DateTo;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\File;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Trix;
use App\Nova\Actions\Deactive;
use App\Nova\Filters\DateFrom;
use Laravel\Nova\Fields\Image;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Select;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\HasMany;
use Laravel\Nova\Fields\MorphOne;
use Laravel\Nova\Fields\BelongsTo;
use Laraning\NovaTimeField\TimeField;
use Laravel\Nova\Fields\BooleanGroup;
use App\Nova\Metrics\companies\allAds;
use Laravel\Nova\Fields\BelongsToMany;
use App\Nova\Metrics\companies\AdsTrend;
use App\Nova\Metrics\companies\allViews;
use App\Nova\Metrics\companies\allBranches;
use Laravel\Nova\Http\Requests\NovaRequest;
use App\Nova\Metrics\companies\allSubscription;
use Manmohanjit\BelongsToDependency\BelongsToDependency;

class CompaniesApp extends Resource
{
   /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Company\Company::class;

    public static function indexQuery(NovaRequest $request, $query)
    {
        return $query->where('parent_id', 0)->where('app',1)->where('active', 0); // TODO: Change the autogenerated stub
    }

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'name_en';
    public static $group = 'Companies';
    public static $priority = 6;
    public static function group()
    {
        return __('companies'); // TODO: Change the autogenerated stub
    }
    public static function label()
    {
        return __('companiesApp'); // TODO: Change the autogenerated stub
    }

    public function title()
    {
        return $this['name_' . app()->getLocale()]; // TODO: Change the autogenerated stub
    }
    public function subtitle()
    {
        return "Address: " . $this['address_' . app()->getLocale()].', Phone: '.$this->phone1;
    }



    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id','name_ar', 'name_en', 'desc_ar', 'desc_en', 'address_ar', 'address_en', 'branch_num', 'active', 'phone1', 'phone2', 'tel', 'fax', 'facebook', 'instagram', 'twitter', 'snapshat', 'whatsapp', 'googleplus', 'website', 'email', 'visit_count', 'lat', 'lon', 'total_rating'
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            new Panel(__('Name Section'), $this->name()),
            new Panel(__('Address Section'), $this->address()),
            new Panel(__('Description Section'), $this->desc()),
            new Panel(__('Service Section'), $this->service()),
            new Panel(__('Uploads Section'), $this->uploads()),
            new Panel(__('Contact Section'), $this->Contacts()),
            new Panel(__('Socials Section'), $this->socials()),
            new Panel(__('Timming Section'), $this->time()),
            new Panel(__('Governorate Section'), $this->governorate()),
            new Panel(__('Branches Section'), $this->branches()),
            new Panel(__('Action Section'), $this->action()),

            MorphOne::make(__('user'),'user', User::class),
            BelongsToMany::make(__('categories'),'categories', Category::class),
            HasMany::make(__('CompanySubsriptions'),'CompanySubsriptions', CompanySubsription::class),
            
            HasMany::make(__('branches'),'branches', Branch::class),
            HasMany::make(__('ads'),'ads', Ad::class),
            HasMany::make(__('payments'),'payments', Payment::class),
            BelongsToMany::make(__('reviews'),'reviews', Review::class),
        ];
    }

    public function uploads()
    {
        return [
            Image::make(__('logo'), 'image')
            ->disk('Root')
            ->store(function (Request $request, $model) {
                $filename = Str::random(50) . '.' . $request->image->getClientOriginalExtension();
                $request->image->move(public_path('/uploads/companies/'), $filename);
                return [
                    'image' => '/uploads/companies/' . $filename,
                ];
            })
            ->prunable()
            ->creationRules('required', 'image', 'mimes:png,jpeg,jpg,gif')
            ->updateRules('image', 'mimes:png,jpeg,jpg,gif'),

        File::make(__('pdf'), 'pdf')
            ->disk('Root')
            ->store(function (Request $request, $model) {
                $filename = Str::random(50) . '.' . $request->pdf->getClientOriginalExtension();
                $request->pdf->move(public_path('/uploads/users/companies/pdf/'), $filename);
                return [
                    'pdf' => '/uploads/users/companies/pdf/' . $filename,
                ];
            })
            ->prunable()
            ->creationRules('file', 'mimes:pdf', 'required')
            ->updateRules('file', 'mimes:pdf')
            ->hideFromIndex(),

        ];
    }

    public function Contacts()
    {
        return [
            Text::make(__('Main Phone'), 'phone1')
                ->rules('required', 'max:190')
                ->sortable(),
            Text::make(__('Second Phone'), 'phone2')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('Telephone'), 'tel')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('fax'),'fax')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('whatsapp'),'whatsapp')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('email'),'email')
                ->rules('required', 'max:190', 'email')
                ->sortable(),
        ];
    }

    public function name()
    {
        return [
            Text::make(__('name_ar'), 'name_ar')
            ->rules('required', 'max:190')
            ->sortable(),
            Text::make(__('name_en'), 'name_en')
            ->rules('required', 'max:190')
            ->sortable(),
        ];
    }

    public function address()
    {
        return [

            Text::make(__('Address Arabic'), 'address_ar')
                ->rules('required', 'max:190')
                ->sortable(),
            Text::make(__('Address English'), 'address_en')
                ->rules('required', 'max:190')
                ->sortable(),
        ];
    }

    public function governorate()
    {
        return [
            BelongsTo::make(__('country'), 'country', Country::class)->rules('required'),

            BelongsToDependency::make(__('city'),'city', City::class)->dependsOn('country', 'country_id')
            ->creationRules('required'),

            BelongsToDependency::make(__('area'),'area', Area::class)->dependsOn('city', 'city_id')
            ->nullable(),

            BelongsToDependency::make(__('zone'),'zone', Zone::class)->dependsOn('area', 'area_id')
            ->nullable(),
        ];
    }

    public function desc()
    {
        return [
            Trix::make(__('desc_ar'), 'desc_ar')->rules('required'),
            Trix::make(__('desc_en'), 'desc_en')->rules('required'),
        ];
    }

    public function service()
    {
        return [
            Trix::make(__('Service Arabic'), 'service_ar')->rules('required'),
            Trix::make(__('Service English'), 'service_en')->rules('required'),
        ];
    }

    public function time()
    {
        return [
            Boolean::make(__('Open Now?'), 'is_open')->trueValue(1)->falseValue(0)->sortable()->default(1)->hideWhenCreating(),
            TimeField::make(__('Opening Time'), 'open_from'),
            TimeField::make(__('Closing Time'), 'open_to'),
            BooleanGroup::make(__('holiday'),'holiday')->options([
                'Saturday' => __('Saturday'),
                'Sunday' => __('Sunday'),
                'Monday' => __('Monday'),
                'Tuesday' => __('Tuesday'),
                'Wednesday' => __('Wednesday'),
                'Thursday' => __('Thursday'),
                'Friday' => __('Friday'),
            ]),
            Trix::make(__('Reason For Closed'), 'closed_reason')->nullable()->onlyOnDetail(),
        ];
    }
    public function action()
    {
        return [
            Boolean::make(__('active'), 'active')->trueValue(1)->falseValue(0)->sortable()->default(0),
        ];
    }
    public function branches()
    {
        return [
            Number::make(__('# of Branches'), 'branch_num')->rules('required')->step(1)->min(0)->default(0)->exceptOnForms(),
        ];
    }

    public function socials()
    {
        return [
            Text::make(__('facebook'),'facebook')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('instagram'),'instagram')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('twitter'),'twitter')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('snapshat'),'snapshat')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('googleplus'),'googleplus')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('linked_in'),'linked_in')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
            Text::make(__('website'),'website')
                ->rules('max:190')
                ->sortable()->hideFromIndex(),
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [
            (new allBranches)->onlyOnDetail(),
            (new allViews)->onlyOnDetail(),
            (new allSubscription)->onlyOnDetail(),
            (new allAds)->onlyOnDetail(),
            (new AdsTrend)->onlyOnDetail()->width('2/3'),
        ];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [
            new DateFrom,
            new DateTo,
        ];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [
            (new Active)->confirmText(__('Are you sure you want to activate this user?'))
                ->confirmButtonText(__('Activate'))
                ->cancelButtonText(__("Don't activate")),
            (new Deactive)->confirmText(__('Are you sure you want to Deactivate this user?'))
                ->confirmButtonText(__('DeActivate'))
                ->cancelButtonText(__("Don't deactivate")),
        ];
    }
}
