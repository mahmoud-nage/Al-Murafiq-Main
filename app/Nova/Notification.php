<?php

namespace App\Nova;

use Illuminate\Http\Request;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\BelongsToMany;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Select;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Trix;
use Laravel\Nova\Http\Requests\NovaRequest;

class Notification extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\General\Notification::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'title_en';
    public static $group = 'Notifications';

    public static function group()
    {
        return __('Notifications'); // TODO: Change the autogenerated stub
    }
    public static function label()
    {
        return __('Notifications'); // TODO: Change the autogenerated stub
    }

    public function title()
    {
        return $this['title_' . app()->getLocale()]; // TODO: Change the autogenerated stub
    }


    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id','title_ar','title_en','type'
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),

            BelongsTo::make(__('user'), 'user', 'App\Nova\User')->rules('required')->default(auth()->user()->id),

            Text::make(__('Title Arabic'),'title_ar')
                ->rules('nullable', 'max:190')
                ->sortable(),
            Text::make(__('Title English'),'title_en')
                ->rules('required', 'max:190')
                ->sortable(),

            Trix::make(__('Body Arabic'),'body_ar')->rules('nullable'),
            Trix::make(__('Body English'),'body_en')->rules('required'),

            Select::make(__('type'), 'type')->options([
                'General' => __('General'),
                'Marketer' => __('Affilate'),
                'Company' => __('Company'),
                'Customer' => __('Customer'),
            ]),

//            BelongsToMany::make(__('users'),'users',User::class)->rules('required'),
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [];
    }
}
