<?php

namespace App\Nova;

use App\Nova\Resource;
use Illuminate\Support\Str;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\ID;
use App\Nova\Filters\DateTo;
use Illuminate\Http\Request;
use App\Nova\Filters\DateFrom;
use Laravel\Nova\Fields\Image;
use Laravel\Nova\Fields\Select;
use Laravel\Nova\Fields\BelongsTo;

class Ad extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\General\Ad::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';

    public static $group = 'Companies';

    public static function group()
    {
        return __('companies'); // TODO: Change the autogenerated stub
    }

    public static $priority = 4;

    public static function label()
    {
        return __('ads'); // TODO: Change the autogenerated stub
    }


    public function title()
    {
        return "Ad Number: " . $this['id']; // TODO: Change the autogenerated stub
    }

    public function subtitle()
    {
        $type = $this->type == 1 ? 'Banner' : 'Slider';
        if ($this->ad_location == 1) {
            $ad_location = 'Home';
        } elseif ($this->ad_location == 2) {
            $ad_location = 'Category';
        } elseif ($this->ad_location == 3) {
            $ad_location = 'Special';
        }

        return "Type: " . $type . '<br> Localtion: ' . $ad_location;
    }

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            BelongsTo::make(__('company'), 'company', Company::class)->rules('required'),
            BelongsTo::make(__('subscription'), 'subscription', Subscription::class)->rules('required'),

            Select::make(__('ad_location'), 'ad_location')->options([
                'home' => __('in_home'),
                'category' => __('Category'),
                'Special' => __('Special'),
            ])->searchable()->rules('required'),

            Select::make(__('type'), 'type')->options([
                'banner' => __('Banner'),
                'slider' => __('Slider'),
            ])->searchable()->rules('required'),

            Boolean::make(__('Special'), 'top')->trueValue(1)->falseValue(0)->sortable()->default(0),

            Image::make(__('image'), 'image')
                ->disk('Root')
                ->store(function (Request $request, $model) {
                    $filename = Str::random(50) . '.' . $request->image->getClientOriginalExtension();
                    $request->image->move(public_path('/uploads/ads/'), $filename);
                    return [
                        'image' => '/uploads/ads/' . $filename,
                    ];
                })
                ->prunable()
                ->rules('image', 'mimes:png,jpeg,jpg,gif'),

        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [
            new DateFrom,
            new DateTo,
        ];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [

        ];
    }
}
