<?php

namespace App\Nova;

use Laravel\Nova\Fields\ID;
use App\Nova\Actions\Active;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Trix;
use App\Nova\Actions\Deactive;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\BelongsToMany;
use Laravel\Nova\Http\Requests\NovaRequest;

class Subscription extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\General\Subscription::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'name_en';
    public static $group = 'Companies';
    public static $priority = 3;

    public static function group()
    {
        return __('companies'); // TODO: Change the autogenerated stub
    }
    public static function label()
    {
        return __('Subscriptions'); // TODO: Change the autogenerated stub
    }
    public function title()
    {
        return $this['name_'.app()->getLocale()]; // TODO: Change the autogenerated stub
    }
    public function subTitle()
    {
        return __('price').': '.$this->price; // TODO: Change the autogenerated stub
    }


    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id','name_ar','name_en','desc_ar','desc_en','days','slider_num','banner_num','total_company','top','active'
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),

            Text::make(__('name_ar'), 'name_ar')
                ->rules('nullable', 'max:190')
                ->sortable(),
            Text::make(__('name_en'), 'name_en')
                ->rules('required', 'max:190')
                ->sortable(),
            Trix::make(__('desc_ar'), 'desc_ar')->rules('nullable'),
            Trix::make(__('desc_en'), 'desc_en')->rules('required'),
            Number::make(__('price'),'price')
                ->default(1)->step(0.01)->min(1)
                ->sortable(),
            Number::make(__('Period Of Subscription Per Day'), 'days')
                ->default(1)->step(1)->min(1)
                ->sortable(),
            Number::make(__('# Of Slider Show In Ad'), 'slider_num')
                ->default(1)->step(1)->min(1)
                ->sortable(),
            Number::make(__('# Of Banner Show In Ad'), 'banner_num')
                ->default(1)->step(1)->min(1)
                ->sortable(),
            Number::make(__('Total Company Subscriped'), 'total_company')
                ->default(1)->step(1)->min(1)
                ->sortable()->exceptOnForms(),
            Boolean::make(__('Special'), 'top')->trueValue(1)->falseValue(0)->sortable()->default(0),
            Boolean::make(__('active'),'active')->trueValue(1)->falseValue(0)->sortable()->default(1),
            BelongsToMany::make(__('companies'),'companies', Company::class),
            BelongsToMany::make(__('ads'),'ads',Ad::class),

        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [
            (new Active)->confirmText(__('Are you sure you want to activate this user?'))
            ->confirmButtonText(__('Activate'))
            ->cancelButtonText(__("Don't activate")),
            (new Deactive)->confirmText(__('Are you sure you want to Deactivate this user?'))
                ->confirmButtonText(__('DeActivate'))
                ->cancelButtonText(__("Don't deactivate")),
        ];
    }
}
