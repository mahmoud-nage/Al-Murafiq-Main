<?php

namespace App\Nova;

use App\Nova\Actions\HideHome;
use App\Nova\Actions\ShowHome;
use Laravel\Nova\Fields\ID;
use App\Nova\Actions\Active;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Trix;
use App\Nova\Actions\Deactive;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Http\Requests\NovaRequest;

class Review extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\General\Review::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';
    public static $group = 'Website';

    public static function group()
    {
        return __('website'); // TODO: Change the autogenerated stub
    }
    public static function label()
    {
        return __('Reviews'); // TODO: Change the autogenerated stub
    }
    public function title()
    {
        return __('comment'). ': '.$this->comment; // TODO: Change the autogenerated stub
    }


    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id','rate','comment','active'
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            Trix::make(__('comment'),'comment')->rules('required')->onlyOnForms(),
            Text::make(__('comment'),'comment')->onlyOnIndex(),
            Number::make(__('rate'),'rate')->rules('required')->max(5)->min(1)->default(1)->sortable(),
            Number::make(__('likes_count'),'likes_count')->exceptOnForms()->sortable(),
            Number::make(__('dislikens_count'),'dislikens_count')->exceptOnForms()->sortable(),
            Boolean::make(__('in_home'),'in_home')->trueValue(1)->falseValue(0)->sortable()->default(0),
            Boolean::make(__('active'),'active')->trueValue(1)->falseValue(0)->sortable()->default(0),
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [
            (new Active)->confirmText(__('Are you sure you want to activate this user?'))
            ->confirmButtonText(__('Activate'))
            ->cancelButtonText(__("Don't activate")),
            (new Deactive)->confirmText(__('Are you sure you want to Deactivate this user?'))
                ->confirmButtonText(__('DeActivate'))
                ->cancelButtonText(__("Don't deactivate")),
            (new ShowHome)->confirmText(__('Are you sure you want to Show This In Home this user?'))
                ->confirmButtonText(__('Show'))
                ->cancelButtonText(__("Don't Show")),
            (new HideHome)->confirmText(__('Are you sure you want to Hide This From Home this user?'))
                ->confirmButtonText(__('Hide'))
                ->cancelButtonText(__("Don't Hide")),
        ];
    }
}
