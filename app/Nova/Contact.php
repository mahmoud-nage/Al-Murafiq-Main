<?php

namespace App\Nova;

use Illuminate\Http\Request;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Trix;
use Laravel\Nova\Http\Requests\NovaRequest;

class Contact extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\General\Contact::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';
    public static $group = 'Website';
    public static function group()
    {
        return __('website'); // TODO: Change the autogenerated stub
    }
    public static function label()
    {
        return __('contacts'); // TODO: Change the autogenerated stub
    }

    public function title()
    {
        return __('subject').$this['subject']; // TODO: Change the autogenerated stub
    }
    public function subtitle()
    {
        return __('message') . $this['message'];
    }

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id','subject'
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),

            BelongsTo::make(__('user'), 'user', 'App\Nova\User')->rules('required'),

            Text::make(__('subject'),'subject')
                ->rules('required', 'max:190')
                ->sortable(),

            Trix::make(__('message'),'message')->rules('required'),

            Boolean::make(__('view'),'view')->trueValue(1)->falseValue(0)->sortable()->default(0),
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [];
    }
}
